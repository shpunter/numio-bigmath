import { assertEquals } from "@std/assert/equals";
import { FDR } from "../fdr.ts";

Deno.test("[20, 20, 22, 24, 28, 28, 32, 32, 32, 35, 35, 40, 46, 79], useMadAbove: 30", () => {
  const array = [20, 20, 22, 24, 28, 28, 32, 32, 32, 35, 35, 40, 46, 79];
  const result = FDR(array.map((el) => el.toString()), { useMadAbove: 30 });

  assertEquals(result, {
    binsNum: "12",
    binWidth: "4.97895920019746064602",
  });
});

Deno.test("[20, 20, 22, 24, 28, 28, 32, 32, 32, 35, 35, 40, 46, 79], useMadAbove: 0", () => {
  const array = [20, 20, 22, 24, 28, 28, 32, 32, 32, 35, 35, 40, 46, 79];
  const result = FDR(array.map((el) => el.toString()), { useMadAbove: 0 });

  assertEquals(result, {
    binsNum: "7",
    binWidth: "9.12809186702867785104",
  });
});

Deno.test("[6, 7, 15, 36, 39, 40, 41, 42, 43, 47, 49]", () => {
  const array = [6, 7, 15, 36, 39, 40, 41, 42, 43, 47, 49];
  const result = FDR(array.map((el) => el.toString()));

  assertEquals(result, { binsNum: "2", binWidth: "25.18008152926611351152" });
});

Deno.test("[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 6, 7, 7, 10]", () => {
  const array = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 6, 7, 7, 10];
  const result = FDR(array.map((el) => el.toString()));

  assertEquals(result, { binsNum: "7", binWidth: "1.3172675120166990199" });
});

Deno.test("[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 6, 7, 7, 10], useMadAbove: 30", () => {
  const array = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 6, 7, 7, 10];
  const result = FDR(array.map((el) => el.toString()), { useMadAbove: 30 });

  assertEquals(result, { binsNum: "14", binWidth: "0.65863375600834950995" });
});

Deno.test("[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 6, 7, 7, 10], useMadAbove: 30, madFrom: 'mean'", () => {
  const array = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 6, 7, 7, 10];
  const result = FDR(array.map((el) => el.toString()), { useMadAbove: 30, madFrom: "mean" });

  assertEquals(result, { binsNum: "9", binWidth: "1.03499590229883494421" });
});

Deno.test("[6, 7, 15, 36, 39, 40, 41, 42, 43, 47, 49]", () => {
  const array = [6, 7, 15, 36, 39, 40, 41, 42, 43, 47, 49];
  const result = FDR(array.map((el) => el.toString()));

  assertEquals(result, { binsNum: "2", binWidth: "25.18008152926611351152" });
});

Deno.test("[6, 7, 15, 36, 39, 40, 41, 42, 43, 47, 49]", () => {
  const array = [6, 7, 15, 36, 39, 40, 41, 42, 43, 47, 49];
  const result = FDR(array.map((el) => el.toString()), { madFrom: "mean", useMadAbove: 30 });

  assertEquals(result, { binsNum: "5", binWidth: "8.82937923753487097157" });
});

Deno.test("[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 100]", () => {
  const array = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 100];
  const result = FDR(array.map((el) => el.toString()));

  assertEquals(result, { binsNum: "90", binWidth: "1.10643537782165792133056724488877918853" });
});

Deno.test("[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 100]", () => {
  const array = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 100].map((el) =>
    el.toString()
  );
  const result = FDR(array, { madFrom: "mean" });

  assertEquals(result, {
    binsNum: "17",
    binWidth: "5.86805905737557861852",
  });
});


Deno.test(`[
      2.5, 2.5, 2.5, 2.534818, 2.534818, 2.534818, 2.545189, 2.545189, 2.545189,
      2.554899, 2.554899, 2.554899, 2.643373, 2.643373, 2.643373, 2.674461,
      2.674461, 2.674461, 2.710059, 2.734935, 2.746267, 2.746267, 2.825329,
      2.825329, 2.825329, 2.85453, 2.865519, 2.896907, 2.896907, 2.916548,
      2.916548, 2.916548, 2.983244, 2.983244, 2.983244, 3, 3, 3.003679,
      3.003679, 3.003679, 3.126411, 3.126411, 3.126411, 3.128704, 3.128704,
      3.128704, 3.221071, 3.221071, 3.221071, 3.227929, 3.257559, 3.257559,
      3.305785, 3.347293, 3.383828, 3.383828, 3.383828, 3.412485, 3.412485,
      3.412485, 3.495014, 3.520265, 3.520265, 3.520265, 3.526133, 3.526133,
      3.526133, 3.671633, 3.671633, 3.671633, 4, 4, 4.664473, 4.664473,
      4.664473, 5, 5.59159, 5.59159, 5.59159, 5.626491, 5.626491, 5.626491,
      5.725668, 5.725668, 5.725668, 6.499715, 6.499715, 6.499715, 7.242344,
      7.242344, 7.242344, 7.433625, 7.433625, 7.433625, 7.6, 7.961677, 7.961677,
      7.961677, 9.009372, 9.009372, 9.009372, 11.618911, 11.666667, 11.857689,
      12.382999, 12.382999, 12.574021, 13.054826, 13.054826, 13.054826,
      13.719091, 13.719091, 13.719091, 14.9631, 15.241082, 17.106404, 17.279565,
      17.279565, 17.279565, 18.208266, 18.208266, 20, 22.108785, 22.108785,
      22.108785, 22.721067, 22.721067, 22.721067, 22.948, 22.948, 22.948,
      23.513966, 25.664634, 25.664634, 33.116279, 34.27907, 34.744186,
      36.860214, 36.860214, 36.860214, 394.639817, 1000.911392,
    ]`, () => {
  const array = [
    2.5, 2.5, 2.5, 2.534818, 2.534818, 2.534818, 2.545189, 2.545189, 2.545189,
    2.554899, 2.554899, 2.554899, 2.643373, 2.643373, 2.643373, 2.674461,
    2.674461, 2.674461, 2.710059, 2.734935, 2.746267, 2.746267, 2.825329,
    2.825329, 2.825329, 2.85453, 2.865519, 2.896907, 2.896907, 2.916548,
    2.916548, 2.916548, 2.983244, 2.983244, 2.983244, 3, 3, 3.003679,
    3.003679, 3.003679, 3.126411, 3.126411, 3.126411, 3.128704, 3.128704,
    3.128704, 3.221071, 3.221071, 3.221071, 3.227929, 3.257559, 3.257559,
    3.305785, 3.347293, 3.383828, 3.383828, 3.383828, 3.412485, 3.412485,
    3.412485, 3.495014, 3.520265, 3.520265, 3.520265, 3.526133, 3.526133,
    3.526133, 3.671633, 3.671633, 3.671633, 4, 4, 4.664473, 4.664473,
    4.664473, 5, 5.59159, 5.59159, 5.59159, 5.626491, 5.626491, 5.626491,
    5.725668, 5.725668, 5.725668, 6.499715, 6.499715, 6.499715, 7.242344,
    7.242344, 7.242344, 7.433625, 7.433625, 7.433625, 7.6, 7.961677, 7.961677,
    7.961677, 9.009372, 9.009372, 9.009372, 11.618911, 11.666667, 11.857689,
    12.382999, 12.382999, 12.574021, 13.054826, 13.054826, 13.054826,
    13.719091, 13.719091, 13.719091, 14.9631, 15.241082, 17.106404, 17.279565,
    17.279565, 17.279565, 18.208266, 18.208266, 20, 22.108785, 22.108785,
    22.108785, 22.721067, 22.721067, 22.721067, 22.948, 22.948, 22.948,
    23.513966, 25.664634, 25.664634, 33.116279, 34.27907, 34.744186,
    36.860214, 36.860214, 36.860214, 394.639817, 1000.911392,
  ].map((el) =>
    el.toString()
  );
  const result = FDR(array, { madFrom: "mean" });

  assertEquals(result, {
    binsNum: "90",
    binWidth: "11.1330731055609738054380991870634861093713",
  });
});
